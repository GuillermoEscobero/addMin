begin
{
    fetch:          (T2, C0),
                    (TA, R, BW=11, M1=1, C1=1),
                    (M2, C2, T1, C3),
                    (A0, B=0, C=0)
}


#
# ALU
#

and reg1 reg2 reg3 {
            co=000000,
            cop=0000,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

or reg1 reg2 reg3 {
            co=000000,
            cop=0001,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=10, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

not reg {
            co=000000,
            cop=0010,
            nwords=1,
            reg=reg(25,21),
            {
                (MC=1, MR=0, SELA=10101, MA=0, SELCOP=11, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

xor reg1 reg2 reg3 {
            co=000000,
            cop=0011,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=100, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

add reg1 reg2 reg3 {
            co=000000,
            cop=1001,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1010, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

sub reg1 reg2 reg3 {
            co=000000,
            cop=1010,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELB=1011, SELA=10000, MA=0, MB=0, SELCOP=1011, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

mul reg1 reg2 reg3 {
            co=000000,
            cop=1011,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELA=1011, SELB=10000, MA=0, MB=0, SELCOP=1100, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

div reg1 reg2 reg3 {
            co=000000,
            cop=1100,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            reg3=reg(15,11),
            {
                (MC=1, MR=0, SELB=1011, SELA=10000, MA=0, MB=0, SELCOP=1101, T6=1, SELC=10101, LC=1, SELP=11, M7, C7, A0=1, B=1, C=0)
            }
}

srl reg1 reg2 val {
            co=010111,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            val=inm(5,0),
            {
                (SE=1, OFFSET=0, SIZE=110, T3=1, C4=1),
                (MC=1, MR=0, SELA=10000, SELB=10000, MA=0, MB=0, SELCOP=1, T6=1, SELC=10101),
         loop9: (A0=0, B=0, C=110, MADDR=bck2ftch),
                (MC=1, MR=0, SELA=10101, SELB=10101, MA=0, MB=0, SELCOP=101, T6=1, LC=1, SELC=10101),
                (MC=1, MR=0, MA=1, MB=11, SELCOP=1011, T6=1, C4=1, SELP=11, M7, C7),
                (A0=0, B=1, C=0, MADDR=loop9),
      bck9ftch: (A0=1, B=1, C=0)
            }
}


#
# MV/L*
#

mv reg1 reg2 {
            co=000001,
            nwords=1,
            reg1=reg(25,21),
            reg2=reg(20,16),
            {
                (SELA=10000, T9, SELC=10101, LC, A0=1, B=1, C=0)
            }
}

li reg val {
            co=000010,
            nwords=1,
            reg=reg(25,21),
            val=inm(15,0),
            {
                (SE=1, OFFSET=0, SIZE=10000, SE=1, T3=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

liu reg val {
            co=111100,
            nwords=1,
            reg=reg(25,21),
            val=inm(15,0),
            {
                (SE=1, OFFSET=0, SIZE=10000, SE=0, T3=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

la  reg addr {
            co=000011,
            nwords=1,
            reg=reg(25,21),
            addr=address(15,0)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

la  reg addr {
            co=111111,
            nwords=2,
            reg=reg(25,21),
            addr=address(63,32)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

lw reg addr {
            co=000100,
            nwords=1,
            reg=reg(25,21),
            addr=address(15,0)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, C0=1),
                (TA=1, R=1, BW=11, M1=1, C1=1),
                (T1=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

sw reg addr {
            co=000101,
            nwords=1,
            reg=reg(25,21),
            addr=address(15,0)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, C0=1),
                (MR=0, SELA=10101,    T9=1, M1=0, C1=1),
                (BW=11, TA=1, TD=1,     W=1,  A0=1, B=1, C=0)
            }
}

lw reg1 (reg2) {
            co=011010,
            nwords=1,
            reg1 = reg(25,21),
            reg2 = reg(20,16),
            {
                (MR=0, SELA=10000, T9=1, C0),
                (TA=1, R=1, BW=11, M1=1, C1=1),
                (T1=1, LC=1, MR=0, SELC=10101, SE=1, A0=1, B=1, C=0)
            }
}

sw reg1 (reg2) {
            co=011011,
            nwords=1,
            reg1 = reg(25,21),
            reg2 = reg(20,16),
            {
                (MR=0, SELA=10000,  T9=1, C0),
                (MR=0, SELA=10101,  T9=1, M1=0, C1=1),
                (BW=11, TA=1, TD=1, W=1,  A0=1, B=1, C=0)
            }
}

lb reg addr {
            co=001000,
            nwords=1,
            reg=reg(25,21),
            addr=address(15,0)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, C0=1),
                (TA=1, R=1, BW=00, SE=1, M1=1, C1=1),
                (T1=1, LC=1, MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

sb reg addr {
            co=001001,
            nwords=1,
            reg=reg(25,21),
            addr=address(15,0)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, C0=1),
                (MR=0, SELA=10101,    T9=1, M1=0, C1=1),
                (BW=0, TA=1, TD=1,     W=1,  A0=1, B=1, C=0)
            }
}


#
# b*
#

b offset {
            co=001100,
            nwords=1,
            offset=address(15,0)rel,
            {
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0)
            }
}

beq reg reg offset {
            co=001101,
            nwords=1,
            reg=reg(25,21),
            reg=reg(20,16),
            offset=address(15,0)rel,
            {
                (T8, C5),
                (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),
                (A0=0, B=1, C=110, MADDR=bck2ftch),
                (T5, M7=0, C7),
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),
      bck2ftch: (T5, M7=0, C7),
                (A0=1, B=1, C=0)
            }
}

bne reg reg offset {
            co=001110,
            nwords=1,
            reg=reg(25,21),
            reg=reg(20,16),
            offset=address(15,0)rel,
            {
                (T8, C5),
                (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),
                (A0=0, B=0, C=110, MADDR=bck3ftch),
                (T5, M7=0, C7),
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),
      bck3ftch: (T5, M7=0, C7),
                (A0=1, B=1, C=0)
            }
}

bge reg reg offset {
            co=001111,
            nwords=1,
            reg=reg(25,21),
            reg=reg(20,16),
            offset=address(15,0)rel,
            {
                (T8, C5),
                (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),
                (A0=0, B=0, C=111, MADDR=bck4ftch),
                (T5, M7=0, C7),
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),
      bck4ftch: (T5, M7=0, C7),
                (A0=1, B=1, C=0)
            }
}

blt reg reg offset {
            co=010000,
            nwords=1,
            reg=reg(25,21),
            reg=reg(20,16),
            offset=address(15,0)rel,
            {
                (T8, C5),
                (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),
                (A0=0, B=1, C=111, MADDR=bck5ftch),
                (T5, M7=0, C7),
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),
      bck5ftch: (T5, M7=0, C7),
                (A0=1, B=1, C=0)
            }
}

bgt reg reg offset {
            co=010001,
            nwords=1,
            reg=reg(25,21),
            reg=reg(20,16),
            offset=address(15,0)rel,
            {
                (T8, C5),
                (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),
                (A0=0, B=0, C=111, MADDR=bck6ftch),
                (A0=0, B=0, C=110, MADDR=bck6ftch),
                (T5, M7=0, C7),
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0),
      bck6ftch: (T5, M7=0, C7),
                (A0=1, B=1, C=0)
            }
}

ble reg reg offset {
            co=010010,
            nwords=1,
            reg=reg(25,21),
            reg=reg(20,16),
            offset=address(15,0)rel,
            {
                (T8, C5),
                (SELA=10101, SELB=10000, MC=1, SELCOP=1011, SELP=11, M7, C7),
                (A0=0, B=0, C=111, MADDR=ble_ys),
                (A0=0, B=0, C=110, MADDR=ble_ys),
                (T5, M7=0, C7),
                (A0=1, B=1, C=0),
        ble_ys: (T5, M7=0, C7),
                (T2, C4),
                (SE=1, OFFSET=0, SIZE=10000, T3, C5),
                (MA=1, MB=1, MC=1, SELCOP=1010, T6, C2, A0=1, B=1, C=0)
            }
}


#
# j*
#

j addr {
            co=010011,
            nwords=1,
            addr=address(15,0)abs,
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, M2=0, C2=1, A0=1, B=1, C=0)
            }
}

jal addr {
            co=010100,
            nwords=1,
            addr=address(15,0)abs,
            {
                (T2, SELC=11111, MR=1, LC),
                (SE=0, OFFSET=0, SIZE=10000, T3=1, M2=0, C2=1, A0=1, B=1, C=0)
            }
}

jr reg1 {
            co=010101,
            nwords=1,
            reg1=reg(25,21),
            {
                (SELA=10101, T9=1, C2=1, A0=1, B=1, C=0)
            }
}


#
# IN/OUT
#

in reg val {
            co=001010,
            nwords=1,
            reg=reg(25,21),
            val=inm(15,0),
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, C0=1),
                (TA=1, IOR=1,    M1=1, C1=1),
                (T1=1, LC=1,     MR=0, SELC=10101, A0=1, B=1, C=0)
            }
}

out reg val {
            co=001011,
            nwords=1,
            reg=reg(25,21),
            val=inm(15,0),
            {
                (SE=0, OFFSET=0, SIZE=10000, T3=1, C0=1),
                (MR=0, SELA=10101, T9=1,    M1=0, C1=1),
                (TA=1, TD=1,     IOW=1,   A0=1, B=1, C=0)
            }
}


#
# Misc
#

nop {
        co=010110,
        nwords=1,
        {
                (A0=1, B=1, C=0)
        }
}

# TODO: addv_2
#addv_2 $r1 $r2 $r3 $r4:
#This instruction adds the values contained in the vectors pointed by the starting
#addresses contained in registers $r2 and $r3, and stores the result in the vector whose
#starting address is given in register $r1. The number of the vector’s elements is
#indicated in the register $ r4 as an integer value. If the number of elements is negative a
#-1 value is stored in register $ r1 as an error code.

addv_2 reg1 reg2 reg3 reg4 {
  co=011000,
  nwords=1,
  reg1=reg(25,21), #R0
  reg2=reg(20,16), #V0
  reg3=reg(15,11), #V1
  reg4=reg(10,6), #number
  {
    #ponemos un contador a 0
    (RA=1000, RB=0, MA=0, MB=0, SELCOP=1010, MC=1, T6, RC=1000, LC=1),

    #empezamos el procedimiento
    begin:  (T8=1, C5=1),
    (SELA=00110, MR=0, T9=1, C4=1),
    (SELCOP=1011, MC=1, RB=00000, MB=0, SELP=11, M7=1, C7=1),
    (A0=0, B=0, C=0111, MADDR=error),

    #FIX: comparar el contador con el tamaño de los arrays
    (T8=1, C5=1),
    (SELA=00110, MR=0, MA=0, RB=1000, MB=0, SELCOP=1011, MC=1, RB=1000, MB=0, T6, M7=0, C7),
    (A0=0, B=0, C=0110, MADDR=break),

    #load words
    (MR=0, SELA=10000, T9=1, C0),
    (TA=1, R=1, BW=11, M1=1, C1=1),

    #empezamos a cargar la siguiente palabra ya que la anterior esta guardada en el mbr
    (MR=0, SELB=01011, T10=1, C0),

    #movemos la pimera palabra hasta rt1
    (T1=1, C4, TA=1, R=1, BW=11, M1=1, C1=1),

    #movemos la segunda palabra a rt2
    (T1=1, C5),

    #metemos los dos valores en la alu, operamos y guardamos en rt3
    (MA=1, MB=1, SELCOP=1010, MC=1, C6),

    #sacamos la direccion de memoria de R0 y escribimos el valor de la suma en ella
    (MR=0, SELA=10101,  T9=1, C0),
    (T7=1, M1=0, C1=1),
    (BW=11, TA=1, TD=1, W=1),

    #incrementar las direcciones de memoria y volver a empezar
    (MC=1, MR=0, SELA=10101, MA=0, MB=10, SELCOP=1010, T6, SELC=10101, LC=1, SELP=11, M7, C7),
    (MC=1, MR=0, SELA=10000, MA=0, MB=10, SELCOP=1010, T6, SELC=10000, LC=1, SELP=11, M7, C7),
    (MC=1, MR=0, SELA=01011, MA=0, MB=10, SELCOP=1010, T6, SELC=01011, LC=1, SELP=11, M7, C7),
    (MC=1, RA=1000, MA=0, MB=11, SELCOP=1010, T6, SELC=01000, MR=1, LC=1, SELP=11, M7, C7),
    (A0=0, B=1, C=0, MADDR=begin),







    error: (A0=1, B=1, C=0)
    break: (A0=1, B=1, C=0)

  }
}

# TODO: seqv_2

#
# Register section
#

registers
{
        0=$zero,
        1=$at,
        2=$v0,
        3=$v1,
        4=$a0,
        5=$a1,
        6=$a2,
        7=$a3,
        8=$t0,
        9=$t1,
        10=$t2,
        11=$t3,
        12=$t4,
        13=$t5,
        14=$t6,
        15=$t7,
        16=$s0,
        17=$s1,
        18=$s2,
        19=$s3,
        20=$s4,
        21=$s5,
        22=$s6,
        23=$s7,
        24=$t8,
        25=$t9,
        26=$k0,
        27=$k1,
        28=$gp,
        29=$sp (stack_pointer),
        30=$fp,
        31=$ra
}
